<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on Of Code &amp; Systems</title><link>/categories/devops/</link><description>Recent content in devops on Of Code &amp; Systems</description><generator>Hugo -- gohugo.io</generator><language>ru-RU</language><lastBuildDate>Mon, 15 Jun 2020 21:00:24 +0300</lastBuildDate><atom:link href="/categories/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Как избежать запуска двойного pipeline при использовании merge requests pipelines?</title><link>/2020/06/gitlab-avoid-double-pipeline-run/</link><pubDate>Mon, 15 Jun 2020 21:00:24 +0300</pubDate><guid>/2020/06/gitlab-avoid-double-pipeline-run/</guid><description>&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/merge_request_pipelines/">Пайплайны для Merge Requests&lt;/a> существуют отдельно (имеют лейбл detached) и запускается независимо от основного pipeline. Из-за этого если сделать push в репу в ветку, из которой в гитлабе есть открытый МР, то запускаются 2 одинаковых пайплайна&lt;/p>
&lt;p>&lt;img src="/wp-content/uploads/2020/06/double-pipeline.png" alt="">
 
Есть варианта, чтобы это избежать:&lt;/p>
&lt;ol>
&lt;li>Дублировать все джобы через extends, чтобы разделить на запускаемые на МРах и на обычные&lt;/li>
&lt;li>Не запускать CI на некоторых ветках, пока из них нет открытого МРа&lt;/li>
&lt;/ol></description></item><item><title>Организация деплоя в множество окружений с помощью helmfile</title><link>/2020/03/helmfile-ogranization/</link><pubDate>Wed, 04 Mar 2020 23:32:24 +0300</pubDate><guid>/2020/03/helmfile-ogranization/</guid><description>&lt;blockquote>
&lt;p>Эта статья на Хабре &lt;a href="https://habr.com/ru/post/491108/">https://habr.com/ru/post/491108/&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/roboll/helmfile">Helmfile&lt;/a> - обёртка для &lt;a href="https://github.com/helm/helm/">helm&lt;/a>, которая позволяет в одном месте описывать множество helm релизов, параметризовать их чарты для нескольких окружений, а также задавать порядок их деплоя.&lt;/p>
&lt;p>О самом helmfile и примерах его использования можно почитать в &lt;a href="https://github.com/roboll/helmfile/blob/master/README.md">readme&lt;/a> и &lt;a href="https://github.com/roboll/helmfile/blob/master/docs/writing-helmfile.md">best practices guide&lt;/a>.&lt;/p>
&lt;p>Мы же познакомимся с неочевидными способами описать релизы в helmfile&lt;/p>
&lt;p>Допустим, у нас есть пачка helm-чартов (для примера пусть будет postgres и некое backend приложение) и несколько окружений (несколько kubernetes кластеров, несколько namespace'ов или несколько и того, и другого). Берём helmfile, читаем документацию и начинаем описывать наши окружения и релизы:&lt;/p>
&lt;pre>&lt;code> .
├── envs
│   ├── devel
│   │   └── values
│   │   ├── backend.yaml
│   │   └── postgres.yaml
│   └── production
│   └── values
│   ├── backend.yaml
│   └── postgres.yaml
└── helmfile.yaml
&lt;/code>&lt;/pre></description></item><item><title>Kubernetes NodePort / LoadBalancer / Ingress? Когда что использовать?</title><link>/2019/01/kubernetes-nodeport-loadbalancer-ingress-kogda-chto-ispolzovat/</link><pubDate>Mon, 07 Jan 2019 22:47:36 +0000</pubDate><guid>/2019/01/kubernetes-nodeport-loadbalancer-ingress-kogda-chto-ispolzovat/</guid><description>&lt;p>Чем отличаются всякие там &lt;strong>NodePorts&lt;/strong>, &lt;strong>LoadBalancer&lt;/strong> и &lt;strong>Ingress&lt;/strong>? Все они дают возможность внешнему трафику попасть в ваш кластер, но дают эту возможность по-разному. Давайте-ка разберёмся, как они это делают и когда какой тип сервиса лучше использовать.&lt;/p>
&lt;h1 id="clusterip">ClusterIP&lt;/h1>
&lt;p>ClusterIP — это дефолтный тип сервиса в кубах, он поднимает вам сервис внутри кластера на внутрекластеровом IP. Доступа для внешнего трафика нет, только внутри кластера.&lt;/p>
&lt;p>YAML для ClusterIP выглядит как-то так:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">apiVersion&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>v1&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>kind&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Service&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>metadata&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>name&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>my-internal-service&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>spec&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>selector&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>app&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>my-app&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>type&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>ClusterIP&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>ports&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>-&lt;span class="w"> &lt;/span>name&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>http&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>port&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>targetPort&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>protocol&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>TCP&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;ldquo;Так, ну и зачем же рассказывать нам о ClusterIP, если он не принимает внешний трафик?&amp;rdquo; — спросите вы. А всё потому, что попасть на этот сервис можно через Kubernetes proxy!&lt;/p></description></item><item><title>dapp — утилита для сборки и деплоя контейнеров. Особенности работы</title><link>/2018/12/dapp-utilita-dlja-sborki-i-deploja-kontejne/</link><pubDate>Mon, 03 Dec 2018 22:54:56 +0000</pubDate><guid>/2018/12/dapp-utilita-dlja-sborki-i-deploja-kontejne/</guid><description>&lt;figure class="img">
&lt;img src="/wp-content/uploads/2018/12/logo_og-e1543878630388.png"/>
&lt;/figure>
&lt;p>&lt;a href="https://github.com/flant/dapp">dapp&lt;/a> — утилита от российской компании Флант, которая занимается внедрением devops-практик (kubernetes, ci/cd и всё такое, ну вы в курсе) Подробное описание можно прочитать на &lt;a href="https://habr.com/company/flant/blog/333682/">Хабре&lt;/a>, а я бы хотел остановиться на некоторых особенностях работы с ней при сборке образов (здесь и далее под образом подразумевается docker image)&lt;/p>
&lt;p>На момент написания статьи актуальная версия dapp 0.36.*&lt;/p>
&lt;p>В качестве примера для наглядности и понимания общей картины возьмём за основу немного урезанное содержимое &lt;strong>dappfile.yaml&lt;/strong> из &lt;a href="https://flant.github.io/dapp/how_to/getting_started.html">официальной документации&lt;/a>&lt;/p></description></item></channel></rss>